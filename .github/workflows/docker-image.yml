name: Build, Push and Deploy

on:
  push:
    branches: [development, production]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Firebase Admin SDK JSON
        run: |
          mkdir -p src/configs
          echo '${{ secrets.FIREBASE_ADMIN_SDK_JSON }}' > src/configs/wyecare-sdk.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_UNAME }}
          password: ${{ secrets.DOCKER_HUB_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_UNAME }}/wyecare-server:${{ github.sha }}
          build-args: |
            FB_ADMIN_SDK=${{ secrets.FB_ADMIN_SDK }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-to-dev:
    needs: build-and-push
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud (Dev)
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_DEV_SA_KEY }}"
          project_id: ${{ secrets.GCP_DEV_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to GCP Dev VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_DEV_VM_NAME }} --zone ${{ secrets.GCP_DEV_VM_ZONE }} --project ${{ secrets.GCP_DEV_PROJECT_ID }} --command '
            set -e
            echo "Development deployment started"

            if ! docker pull ${{ secrets.DOCKER_HUB_UNAME }}/wyecare-server:${{ github.sha }}; then
              echo "Failed to pull Docker image"
              exit 1
            fi

            docker stop wyecare-dev-container 2>/dev/null || true
            docker rm wyecare-dev-container 2>/dev/null || true

            echo "${{ secrets.DEV_ENV_FILE }}" > .env_temp

            if ! docker run -d --name wyecare-dev-container \
                  --env-file .env_temp \
                  -p 4000:4000 \
                  --cpus=0.5 \
                  --memory=512m \
                  --restart unless-stopped \
                  ${{ secrets.DOCKER_HUB_UNAME }}/wyecare-server:${{ github.sha }}; then
              echo "Failed to start new container"
              exit 1
            fi

            rm .env_temp

            if ! docker ps | grep wyecare-dev-container; then
              echo "Container is not running after deployment"
              exit 1
            fi

            echo "Development deployment finished successfully"
          '

      - name: Clean up old images on Development server
        run: |
          gcloud compute ssh ${{ secrets.GCP_DEV_VM_NAME }} --zone ${{ secrets.GCP_DEV_VM_ZONE }} --project ${{ secrets.GCP_DEV_PROJECT_ID }} --command '
            docker image prune -a -f --filter "until=168h"
          '

  deploy-to-prod:
    needs: build-and-push
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud (Prod)
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to GCP Prod VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} --zone ${{ secrets.GCP_VM_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }} --command '
            set -e
            echo "Production deployment started"

            if ! docker pull ${{ secrets.DOCKER_HUB_UNAME }}/wyecare-server:${{ github.sha }}; then
              echo "Failed to pull Docker image"
              exit 1
            fi

            docker stop wyecare-prod-container 2>/dev/null || true
            docker rm wyecare-prod-container 2>/dev/null || true

            echo "${{ secrets.ENV_FILE }}" > .env_temp

            if ! docker run -d --name wyecare-prod-container \
                  --env-file .env_temp \
                  -p 4000:4000 \
                  --cpus=0.5 \
                  --memory=512m \
                  --restart unless-stopped \
                  ${{ secrets.DOCKER_HUB_UNAME }}/wyecare-server:${{ github.sha }}; then
              echo "Failed to start new container"
              exit 1
            fi

            rm .env_temp

            if ! docker ps | grep wyecare-prod-container; then
              echo "Container is not running after deployment"
              exit 1
            fi

            echo "Production deployment finished successfully"
          '

      - name: Clean up old images on Production server
        run: |
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} --zone ${{ secrets.GCP_VM_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }} --command '
            docker image prune -a -f --filter "until=168h"
          '

  cleanup-runner:
    needs: [deploy-to-dev, deploy-to-prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Clean up old images on GitHub runner
        run: |
          docker image prune -a -f --filter "until=168h"
